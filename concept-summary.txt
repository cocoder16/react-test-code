https://velog.io/@velopert?tag=test

* TDD의 3가지 절차

실패 -> 성공 -> 리팩토링 -> 실패 (반복)

테스트케이스 코드 작성 (실패)
-> 테스트케이스를 통과하도록 코드를 작성 (성공)
-> 구현한 코드에 중복되는 코드가 있거나 혹은 더 개선시킬 방법이 있으면 리팩토링 (리팩토링)
-> 다시 (실패) 단계로 돌아가서 반복


* 각 테스트 케이스는 유닛 테스트이거나 통합 테스트?

* 유닛 테스트

함수별? 각 경우의 수 별? 작은 단위 테스트

* 통합 테스트

기능이 전체적으로 잘 작동하는지 확인
유닛 테스트의 단위를 두 개이상 통합하여도 그 유닛들이 잘 작동하는지 테스트

* react에서의 테스트 코드

Enzyme vs react-testing-library
https://velog.io/@velopert/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%86%8C%EA%B0%9C

* react-testing-library

- TDD 절차

컴포넌트 파일 파일만들고 더미 return

테스트 코드 작성 describe 해당 컴포넌트
테스트 코드 작성 it 무엇을 렌더링할지?
테스트 케이스 통과시키기 위해 컴포넌트 렌더링 코드 작성
테스트 통과하면 리팩토링

테스트 코드 작성 it 무슨 이벤트가 발생시 무슨 값이 바뀌는지? (요구사항 경우의 수 별로)
테스트 케이스 통과시키기 위해 이벶트 로직 코드 작성
테스트 통과하면 리팩토링

- 테스트 코드에서 describe하고 있는 컴포넌트에 sample props를 입력해줄 수 있기 때문에,
실제 코드에서 상위 컴포넌트에서 props를 넘겨주는 코드가 없더라도 해당 컴포넌트의 로직만으로도 테스트가 가능하다.

문제는 실제 props로 넘겨받고 있는 함수들의 동작이 원하는 로직대로 움직이는지 아닌지 어떻게 테스트할까?
=> 그건 상위컴포넌트에 대한 테스트 코드를 따로 만든다.
=> 컴포넌트에 대한 테스트 코드와 컨테이너에 대한 테스트 코드는 따로 작성할테니.
컨테이너에서 로직에 대한 테스트 코드는 어떤 이벤트가 발생할때 예상되는 결과가 나오는지를 테스트한다. (TodoApp.test)

- data-testid

실제 DOM에 접근하여 테스트할 때에는 querySelector 같은 함수가 아니라 data-testid 속성을 이용해 getByTestId()로 접근한다.
컴포넌트가 아닌 JSX 내에 있는 실제 엘리먼트 태그에 속성을 부여해야한다.

* 비동기 테스트
벨로퍼트 블로그 예제가 버전을 반영하지 못하고 있음.
API 레퍼런스
https://testing-library.com/docs/dom-testing-library/api-async

- waitFor
waitFor는 프로미스다. 테스트 케이스가 성공하면 콜백함수의 리턴값을 resolve한다.

- waitForElementToBeRemoved
콜백함수의 리턴값인 엘리먼트가 사라지는지를 테스트 한다.

- axios 를 사용하는 경우 REST API 테스트
axios-mock-adapter 라이브러리 사용
https://www.npmjs.com/package/axios-mock-adapter

* 리덕스 테스트
뭘 테스트해야할까?
- 액션생성함수 : 의도한대로 액션이 잘 생성되는지
- 리듀서 : 상태와 액션을 전달하면 의도한대로 데이터가 업데이트 되는지
- UI 동작 이후 액션생성, 리듀서를 거쳐 데이터가 잘 업데이트 되어 컨테이너가 받아오고 컴포넌트가 렌더링한 결과까지 보는 것이 통합테스트의 일종일 듯

* 종합적 프로세스 (나름 정리해본 것)
- 유닛테스트
컴포넌트에서
렌더링 테스트 -> 퍼블리싱 -> 통과 -> 로직필요? 함수 유닛 테스트 -> props, state 추가 -> 통과 -> 리팩토링 -> 다음 컴포넌트로
                           -> 로직필요x? 다음 컴포넌트로

리덕스에서
-> 액션생성 테스트 -> 액션생성함수 제작 -> 통과 -> 리팩토링
-> 초기 state 테스트 -> 초기 state 제작 -> 통과 -> 리팩토링
-> 리듀서 테스트 -> 리듀서 제작 -> 통과 -> 리팩토링

api에서
-> 리퀘스트 테스트 -> 리스폰스 데이터 테스트 -> 리팩토링

- 통합테스트 App.test.js, 각 페이지별 test.js 
크리티컬한 혹은 코어한 시나리오만 it단위로 테스트 작성.
각 유닛테스트가 잘 작동하지만, 유닛테스트의 시나리오를 연결해서 한번에 테스트했을 때에도 잘되냐를 테스트
