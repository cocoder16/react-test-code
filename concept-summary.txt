https://velog.io/@velopert?tag=test

* TDD의 3가지 절차

실패 -> 성공 -> 리팩토링 -> 실패 (반복)

테스트케이스 코드 작성 (실패)
-> 테스트케이스를 통과하도록 코드를 작성 (성공)
-> 구현한 코드에 중복되는 코드가 있거나 혹은 더 개선시킬 방법이 있으면 리팩토링 (리팩토링)
-> 다시 (실패) 단계로 돌아가서 반복


* 각 테스트 케이스는 유닛 테스트이거나 통합 테스트?

* 유닛 테스트

기능별? 함수별? 각 경우의 수 별(요구사항 별)? 작은 단위 테스트

* 통합 테스트

기능이 전체적으로 잘 작동하는지 확인
유닛 테스트의 단위를 두 개이상 통합하여도 그 유닛들이 잘 작동하는지 테스트


* react에서의 테스트 코드

Enzyme vs react-testing-library
https://velog.io/@velopert/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%86%8C%EA%B0%9C

* react-testing-library

- TDD 절차

컴포넌트 파일 파일만들고 더미 return

테스트 코드 작성 describe 해당 컴포넌트
테스트 코드 작성 it 무엇을 렌더링할지?
테스트 케이스 통과시키기 위해 컴포넌트 렌더링 코드 작성
테스트 통과하면 리팩토링

테스트 코드 작성 it 무슨 이벤트가 발생시 무슨 값이 바뀌는지? (요구사항 경우의 수 별로)
테스트 케이스 통과시키기 위해 이벶트 로직 코드 작성
테스트 통과하면 리팩토링

- 테스트 코드에서 describe하고 있는 컴포넌트에 sample props를 입력해줄 수 있기 때문에,
실제 코드에서 상위 컴포넌트에서 props를 넘겨주는 코드가 없더라도 해당 컴포넌트의 로직만으로도 테스트가 가능하다.

문제는 실제 props로 넘겨받고 있는 함수들의 동작이 원하는 로직대로 움직이는지 아닌지 어떻게 테스트할까?